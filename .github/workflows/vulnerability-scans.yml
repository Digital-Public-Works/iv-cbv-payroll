# GitHub Actions CI workflow that runs vulnerability scans on the application's Docker image
# to ensure images built are secure before they are deployed.
#
# NOTE: Each job builds the image independently (jobs can't share artifacts easily).
#       However, all jobs use Docker Buildx registry cache to share layers, so builds after
#       the first are very fast (~2-3 min vs ~10 min).
name: Vulnerability Scans

on:
  workflow_call:
    inputs:
      app_name:
        description: "name of application folder under infra directory"
        required: true
        type: string

jobs:
  hadolint-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Scans Dockerfile for any bad practices or issues
      - name: Scan Dockerfile by hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.app_name }}/Dockerfile
          format: tty
          failure-threshold: warning
          output-file: hadolint-results.txt

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: cat hadolint-results.txt >> "$GITHUB_STEP_SUMMARY"

  trivy-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event.pull_request.head.repo.full_name == github.repository
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build release image with cache
        id: build-image
        uses: ./.github/actions/build-release-with-cache
        with:
          app_name: ${{ inputs.app_name }}

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ steps.build-image.outputs.full_image }}
          format: table
          exit-code: 1
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: os
          scanners: vuln,secret

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          echo "View results in GitHub Action logs" >> "$GITHUB_STEP_SUMMARY"

  anchore-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event.pull_request.head.repo.full_name == github.repository
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build release image with cache
        id: build-image
        uses: ./.github/actions/build-release-with-cache
        with:
          app_name: ${{ inputs.app_name }}

      - name: Run Anchore vulnerability scan
        uses: anchore/scan-action@v6.2.0
        with:
          image: ${{ steps.build-image.outputs.full_image }}
          output-format: table
          severity-cutoff: high

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: echo "View results in GitHub Action logs" >> "$GITHUB_STEP_SUMMARY"

  dockle-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event.pull_request.head.repo.full_name == github.repository
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build release image with cache
        id: build-image
        uses: ./.github/actions/build-release-with-cache
        with:
          app_name: ${{ inputs.app_name }}

      # Dockle doesn't allow you to have an ignore file for the DOCKLE_ACCEPT_FILES
      # variable.
      - name: Set dockle configuration from environment
        run: |
          grep -s '^DOCKLE_' .dockleconfig >> "$GITHUB_ENV"

      - name: Run Dockle container linter
        uses: erzz/dockle-action@v1
        with:
          image: ${{ steps.build-image.outputs.full_image }}
          exit-code: "1"
          failure-threshold: WARN
          accept-filenames: ${{ env.DOCKLE_ACCEPT_FILES }}

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          {
            echo '```json'
            cat dockle-report.json
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
